CMAKE_MINIMUM_REQUIRED(VERSION 2.8...3.16)
SET(_TARGET gn)
PROJECT(${_TARGET})
ADD_DEFINITIONS("-std=c++11")
SET(CMAKE_CXX_STANDARD 11)
FIND_PACKAGE(OpenMP COMPONENTS)
IF (OpenMP_FOUND)
	MESSAGE(STATUS "OpenMP_VERSION = ${OpenMP_C_VERSION}")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF()
#ADD_DEFINITIONS("-Wno-extra")
IF (NOT WIN32)
    SET(EXTRA_LIBS pthread)
ENDIF()
FILE(GLOB SOURCE_FILES "*.c*")
SET(UNDEFS)
LIST(APPEND LIST_DEFINE _GN)
LIST(APPEND LIST_TARGET ${_TARGET})
FOREACH(TARGET_NAME ${LIST_TARGET})
    LIST(APPEND I e)
    FOREACH(MACROS ${LIST_DEFINE})
        LIST(APPEND J e)
        LIST(LENGTH I i)
        LIST(LENGTH J j)
        IF (${i} EQUAL ${j})
            ADD_EXECUTABLE(${TARGET_NAME} ${SOURCE_FILES})
            SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES COMPILE_FLAGS "${UNDEFS} -D${MACROS}")
            TARGET_LINK_LIBRARIES(${TARGET_NAME} ${EXTRA_LIBS})
            SET(UNDEFS "${UNDEFS} -U${MACROS}")
            INSTALL(TARGETS ${TARGET_NANE} RUNTIME DESTINATION .)
        ENDIF()
    ENDFOREACH()
    SET(J)
ENDFOREACH()
SET(EXEC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../gen/)
IF (${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
IF (EXISTS "/proc/self/uid_map")
    FILE(STRINGS "/proc/self/uid_map" UID_MAP_CONTENTS NEWLINE_CONSUME)
    LIST(GET UID_MAP_CONTENTS 0 FIRST_LINE)
    STRING(REGEX MATCH "^0 +0" IS_ROOT_USER "${FIRST_LINE}")
    IF (NOT IS_ROOT_USER)
        SET(HINT_MSG ", build by 'root' to install it")
    ELSE()
        SET(EXEC_PATH /usr/local/bin/)
    ENDIF()
ELSE()
    MESSAGE(STATUS "Unable to check for root user, assuming not")
ENDIF()
ELSEIF(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Darwin")
    ADD_DEFINITIONS("-Wno-format")
ENDIF()
IF (WIN32)
    SET(_TARGET_ "${_TARGET}.exe")
    IF (${CMAKE_BUILD_TYPE} STREQUAL "Release")
        SET(_TARGET_ "${CMAKE_BUILD_TYPE}/${_TARGET}.exe")
    ENDIF()
    SET(EXEC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../out/)
ELSE()
    SET(_TARGET_ ${_TARGET})
ENDIF()
ADD_CUSTOM_COMMAND(
    TARGET ${_TARGET}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory ${EXEC_PATH}
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/${_TARGET_} ${EXEC_PATH}
    COMMENT "-- 'gn' is a cross-platform tool to generatting numbers${HINT_MSG}."
)
ADD_CUSTOM_TARGET(clear
    COMMAND ${CMAKE_BUILD_TOOL} clean
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/clean-all.cmake
)
