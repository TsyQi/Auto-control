/* soapmywebProxy.cpp
   Generated by gSOAP 2.8.106 for rpcapi.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapmywebProxy.h"

mywebProxy::mywebProxy() : soap(SOAP_IO_DEFAULT)
{	mywebProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

mywebProxy::mywebProxy(const mywebProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

mywebProxy::mywebProxy(const struct soap &_soap) : soap(_soap)
{ }

mywebProxy::mywebProxy(const struct soap &_soap, const char *soap_endpoint_url) : soap(_soap)
{
	soap_endpoint = soap_endpoint_url;
}

mywebProxy::mywebProxy(const char *soap_endpoint_url) : soap(SOAP_IO_DEFAULT)
{	mywebProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

mywebProxy::mywebProxy(soap_mode iomode) : soap(iomode)
{	mywebProxy_init(iomode, iomode);
}

mywebProxy::mywebProxy(const char *soap_endpoint_url, soap_mode iomode) : soap(iomode)
{	mywebProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

mywebProxy::mywebProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	mywebProxy_init(imode, omode);
}

mywebProxy::~mywebProxy()
{
	this->destroy();
}

void mywebProxy::mywebProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "api", "urn:myweb", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

mywebProxy *mywebProxy::copy()
{	mywebProxy *dup = SOAP_NEW_UNMANAGED(mywebProxy(*(struct soap*)this));
	return dup;
}

mywebProxy& mywebProxy::operator=(const mywebProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void mywebProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void mywebProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	mywebProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void mywebProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *mywebProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *mywebProxy::soap_fault()
{	return this->fault;
}

const char *mywebProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this);
}

const char *mywebProxy::soap_fault_string()
{	return ::soap_fault_string(this);
}

const char *mywebProxy::soap_fault_detail()
{	return ::soap_fault_detail(this);
}

int mywebProxy::soap_close_socket()
{	return ::soap_closesock(this);
}

int mywebProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this);
}

void mywebProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void mywebProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *mywebProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int mywebProxy::send_trans(const char *soap_endpoint_url, const char *soap_action, char *msg)
{
	struct soap *soap = this;
	struct api__trans soap_tmp_api__trans;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__trans.msg = msg;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__trans(soap, &soap_tmp_api__trans);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_api__trans(soap, &soap_tmp_api__trans, "api:trans", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__trans(soap, &soap_tmp_api__trans, "api:trans", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int mywebProxy::recv_trans(char **rtn)
{
	struct soap *soap = this;
	struct api__transResponse *soap_tmp_api__transResponse;
	if (!rtn)
		return soap_closesock(soap);
	*rtn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_api__transResponse = soap_get_api__transResponse(soap, NULL, "", NULL);
	if (!soap_tmp_api__transResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (rtn && soap_tmp_api__transResponse->rtn)
		*rtn = *soap_tmp_api__transResponse->rtn;
	return soap_closesock(soap);
}

int mywebProxy::send_get_server_status(const char *soap_endpoint_url, const char *soap_action, char *req)
{
	struct soap *soap = this;
	struct api__get_server_status soap_tmp_api__get_server_status;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__get_server_status.req = req;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__get_server_status(soap, &soap_tmp_api__get_server_status);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_api__get_server_status(soap, &soap_tmp_api__get_server_status, "api:get-server-status", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__get_server_status(soap, &soap_tmp_api__get_server_status, "api:get-server-status", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int mywebProxy::recv_get_server_status(char *&rsp)
{
	struct soap *soap = this;
	struct api__get_server_statusResponse *soap_tmp_api__get_server_statusResponse;
	rsp = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_api__get_server_statusResponse = soap_get_api__get_server_statusResponse(soap, NULL, "", NULL);
	if (!soap_tmp_api__get_server_statusResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	rsp = soap_tmp_api__get_server_statusResponse->rsp;
	return soap_closesock(soap);
}

int mywebProxy::send_login_by_key(const char *soap_endpoint_url, const char *soap_action, char *usr, char *psw)
{
	struct soap *soap = this;
	struct api__login_by_key soap_tmp_api__login_by_key;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__login_by_key.usr = usr;
	soap_tmp_api__login_by_key.psw = psw;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__login_by_key(soap, &soap_tmp_api__login_by_key);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_api__login_by_key(soap, &soap_tmp_api__login_by_key, "api:login-by-key", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_api__login_by_key(soap, &soap_tmp_api__login_by_key, "api:login-by-key", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int mywebProxy::recv_login_by_key(struct api__ArrayOfEmp2 &stat)
{
	struct soap *soap = this;
	soap_default_api__ArrayOfEmp2(soap, &stat);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_api__ArrayOfEmp2(soap, &stat, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
