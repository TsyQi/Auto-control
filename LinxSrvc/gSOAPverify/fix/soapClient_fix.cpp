/* soapClient.cpp
   Generated by gSOAP 2.8.106 for rpcapi.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.106 2020-09-06 16:27:00 GMT")

SOAP_FMAC5 int SOAP_FMAC6 soap_send_api__trans(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* msg)
{
	struct api__trans soap_tmp_api__trans;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__trans.msg = msg;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__trans(soap, &soap_tmp_api__trans);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH)) {
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put_api__trans(soap, &soap_tmp_api__trans, "api:trans", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put_api__trans(soap, &soap_tmp_api__trans, "api:trans", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_api__trans(struct soap* soap, char** rtn)
{
	struct api__transResponse* soap_tmp_api__transResponse;
	if (!rtn)
		return soap_closesock(soap);
	*rtn = NULL;
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_api__transResponse = soap_get_api__transResponse(soap, NULL, "", NULL);
	if (!soap_tmp_api__transResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	if (rtn && soap_tmp_api__transResponse->rtn)
		*rtn = *soap_tmp_api__transResponse->rtn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_api__get_server_status(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* req)
{
	struct api__get_server_status soap_tmp_api__get_server_status;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__get_server_status.req = req;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__get_server_status(soap, &soap_tmp_api__get_server_status);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH)) {
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put_api__get_server_status(soap, &soap_tmp_api__get_server_status, "api:get-server-status", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put_api__get_server_status(soap, &soap_tmp_api__get_server_status, "api:get-server-status", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_api__get_server_status(struct soap* soap, char*& rsp)
{
	struct api__get_server_statusResponse* soap_tmp_api__get_server_statusResponse;
	rsp = NULL;
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_api__get_server_statusResponse = soap_get_api__get_server_statusResponse(soap, NULL, "", NULL);
	if (!soap_tmp_api__get_server_statusResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	rsp = soap_tmp_api__get_server_statusResponse->rsp;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_api__login_by_key(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* usr, char* psw)
{
	struct api__login_by_key soap_tmp_api__login_by_key;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/myweb.cgi";
	soap_tmp_api__login_by_key.usr = usr;
	soap_tmp_api__login_by_key.psw = psw;
	soap_begin(soap);
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_api__login_by_key(soap, &soap_tmp_api__login_by_key);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH)) {
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put_api__login_by_key(soap, &soap_tmp_api__login_by_key, "api:login-by-key", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put_api__login_by_key(soap, &soap_tmp_api__login_by_key, "api:login-by-key", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_api__login_by_key(struct soap* soap, struct api__ArrayOfEmp2& stat)
{
	soap_default_api__ArrayOfEmp2(soap, &stat);
	if (soap_begin_recv(soap)
		|| soap_envelope_begin_in(soap)
		|| soap_recv_header(soap)
		|| soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_api__ArrayOfEmp2(soap, &stat, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_api__trans(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* msg, char** rtn)
{
	if (soap_send_api__trans(soap, soap_endpoint, soap_action, msg) || soap_recv_api__trans(soap, rtn))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_api__get_server_status(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* req, char*& rsp)
{
	if (soap_send_api__get_server_status(soap, soap_endpoint, soap_action, req) || soap_recv_api__get_server_status(soap, rsp))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_api__login_by_key(struct soap* soap, const char* soap_endpoint, const char* soap_action, char* usr, char* psw, struct api__ArrayOfEmp2& stat)
{
	if (soap_send_api__login_by_key(soap, soap_endpoint, soap_action, usr, psw) || soap_recv_api__login_by_key(soap, stat))
		return soap->error;
	return SOAP_OK;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
